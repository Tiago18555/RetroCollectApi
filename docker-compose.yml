version: '3.4'

services:
  postgres:
    image: postgres:latest
    restart: always
    ports:
      - "27000:5432"
    environment:
      POSTGRES_DB: RetroCollect
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: batatapalha
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - broker-kafka

  mongo:
    image: mongo:latest
    restart: always
    ports:
      - "27017:27017"
    networks:
      - broker-kafka
    volumes:
      - mongo-data:/data/db
      - ./mongodb-init.js:/docker-entrypoint-initdb.d/create-collection.js

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks: 
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks: 
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks: 
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      
  retrocollectapi:
    image: ${DOCKER_REGISTRY-}retrocollectapi
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:5000
    ports:
      - "8080:5000" # HTTP
    volumes:
      - ./RetroCollect:/home/app
    networks:
      - broker-kafka
    depends_on:
      - postgres
      - mongo

volumes:
  postgres-data:
  mongo-data:

networks: 
  broker-kafka:
    driver: bridge
